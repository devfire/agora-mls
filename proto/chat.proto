syntax = "proto3";

package agora_chat;


// MlsMessageOut serves as a wrapper for messages produced by an OpenMLS group.
// This is intended for publishing to a multicast topic where subscribers can
// deserialize this wrapper and then process the inner MLS message payload.
message AgoraPacket {
  // Corresponds to the `version` field in the OpenMLS MlsMessageOut struct.
  ProtocolVersion version = 1;

  // The body of the message, corresponding to the MlsMessageBodyOut enum.
  // The 'oneof' constraint ensures that a message can only be one of these types at a time,
  // perfectly mapping the behavior of the Rust enum.
  oneof body {
    PublicMessage public_message = 2;
    PrivateMessage private_message = 3;
    GroupInfo group_info = 4;
    UserAnnouncement user_announcement = 6;
    EncryptedGroupInfo encrypted_group_info = 7;
  }
}

// Represents the MLS protocol version in use.
// This should be kept in sync with the versions supported by your OpenMLS implementation.
enum ProtocolVersion {
  PROTOCOL_VERSION_UNSPECIFIED = 0;
  MLS_1_0 = 1;
  // Add other protocol versions as they become available/supported.
}

// A wrapper for an MLS PublicMessage.
message PublicMessage {
  // The raw bytes of the PublicMessage, serialized using tls_codec.
  bytes tls_serialized_public_message = 1;
}

// A wrapper for an MLS PrivateMessage (Ciphertext).
message PrivateMessage {
  // The raw bytes of the PrivateMessage, serialized using tls_codec.
  bytes tls_serialized_private_message = 1;
}

// A wrapper for an MLS Welcome message.
message Welcome {
  // The raw bytes of the Welcome message, serialized using tls_codec.
  bytes tls_serialized_welcome_message = 1;
}

// A wrapper for an MLS GroupInfo message.
message GroupInfo {
  // The raw bytes of the GroupInfo message, serialized using tls_codec.
  bytes tls_serialized_group_info = 1;
}

// A user announcement that includes both the KeyPackage and username.
// This allows username-based discovery while keeping the KeyPackage intact.
message UserAnnouncement {
  // The user's chosen display name/handle
  string username = 1;

  // The raw bytes of the KeyPackage, serialized using tls_codec.
  bytes tls_serialized_key_package = 2;
}

// HPKE-encrypted GroupInfo for external commit joins.
// This message contains the plaintext of the group id and a GroupInfo encrypted with the recipient's HPKE public key
// from their KeyPackage, allowing secure transmission to a joining user who is
// not yet a member of the group. The recipient can decrypt using their HPKE private
// key and then use the GroupInfo to create an external commit.
message EncryptedGroupInfo {
  // The KEM output from HPKE encryption.
  bytes kem_output = 1;

  // The HPKE ciphertext containing the encrypted GroupInfo.
  bytes ciphertext = 2;

  // The username of the sender who created this invitation.
  // This allows recipients to know who invited them before decrypting.
  string sender_username = 3;

  // The sender's KeyPackage for return communication.
  // This allows the recipient to encrypt messages back to the sender.
  bytes sender_key_package = 4;
}